/*
Given a positive integer n, the following rules will always create a sequence that ends with 1, called the hailstone sequence:

If n is even, divide it by two
If n is odd, multiply it by 3 and add 1 (i.e. 3n +1)
Continue until n is 1
Write a program that reads an integer as input and prints the hailstone sequence starting with the integer entered. Format the output so that ten integers, each separated by a tab character (\t), are printed per line. End the last line of output with a new line (endl).

The output format can be achieved as follows:
cout << n << "\t";

Ex: If the input is:

25
the output is:

25   76   38   19   58   29   88   44   22   11 
34   17   52   26   13   40   20   10   5    16 
8    4    2    1
*/



#include <iostream>
using namespace std;

int main()
{
   int n;
   cin >> n;

   int count = 0;
      while (n != 1)
      {
        cout << n << "\t";
        count++;
          if (count % 10 == 0)
          {
            cout << endl;
          }
          if (n % 2 == 0)
          {
            n /= 2;
          }
          else
          {
            n = 3 * n + 1;
          }
      }
      
   cout << n << endl;

   return 0;
}
